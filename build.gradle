buildscript {
    dependencies {
        classpath 'org.flywaydb:flyway-mysql:9.21.1'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.flywaydb.flyway" version "9.21.0"
    id 'jacoco'
}

group = 'me.kenux'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Querydsl for spring boot 3.0
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // flyway db migration
//    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // jwt : https://github.com/jwtk/jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // 설정파일 암호화
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70', 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // time based uuid generator
    implementation 'com.fasterxml.uuid:java-uuid-generator:4.2.0'

    // java faker
    testImplementation 'com.github.javafaker:javafaker:1.0.2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

flyway {
    configFiles = ["${file('src/main/resources/db/config/flyway-' + profile + '.conf').absolutePath}"]
    locations = ["filesystem:${file('src/main/resources/db/sql').absolutePath}"]
    encoding = 'UTF-8'
    outOfOrder = true // 여러브랜치에서 서로 다른 날짜로 만들어도 작동하도록
    validateOnMigrate = true
    // locations = ["classpath:sql"] gradle CLI 를 사용하는 경우 classpath 는 인식 하지 못함.
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

jacoco {
    toolVersion = '0.8.8'
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/*",
                    "**/dto/*",
                    "**/*Application*",
                    "**/*Request*",
                    "**/*Response*",
                    "**/*Dto*"
//                    "**/*Filter*",
//                    "**/*Exception*"
            ] + Qdomains)
        }))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    dependsOn(tasks.jacocoTestReport)

    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            // includes = []

//            limit {
//            	counter = 'LINE'
//            	value = 'COVEREDRATIO'
//            	minimum = 0.10
//            }
//
//            // 브랜치 커버리지 제한을 80%로 설정
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.10
//            }

            excludes = ["**/config/*",
                        "**/dto/*",
                        "**/*Application*",
                        "**/*Request*",
                        "**/*Response*",
                        "**/*Dto*"
//                        "**/*Filter*",
//                        "**/*Exception*"
            ] + Qdomains
        }
    }
}
