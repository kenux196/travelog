# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
#    - name: Mattermost Message
#      run: |
#        echo "{\"text\":\"Start build with github action :tada:\"}" > mattermost.json
#    - uses: mattermost/action-mattermost-notify@master
#      env:
#        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
#        MATTERMOST_CHANNEL: ${{ secrets.MATTERMOST_CHANNEL }}
#        #        message: "Start build ~~~ ${{ github.repository }}"

    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Test with Gradle
      run: ./gradlew test

    - name: Publish Unit Test Results # test 후 result를 보기 위해 추가
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() # test가 실패해도 report를 남기기 위해 설정
      with:
        junit_files: 'build/test-results/test/TEST-*.xml'

    - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록합니다
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: 'build/test-results/test/TEST-*.xml'
        token: ${{ github.token }}
